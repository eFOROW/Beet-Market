//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beet_Market.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatRoom", Namespace="http://schemas.datacontract.org/2004/07/KakaoLogin")]
    [System.SerializableAttribute()]
    public partial class ChatRoom : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string A_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string A_imgUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime C_DtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string J_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string J_imgUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int P_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagField;


        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string A_Name {
            get {
                return this.A_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.A_NameField, value) != true)) {
                    this.A_NameField = value;
                    this.RaisePropertyChanged("A_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string A_imgUrl {
            get {
                return this.A_imgUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.A_imgUrlField, value) != true)) {
                    this.A_imgUrlField = value;
                    this.RaisePropertyChanged("A_imgUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime C_Dt {
            get {
                return this.C_DtField;
            }
            set {
                if ((this.C_DtField.Equals(value) != true)) {
                    this.C_DtField = value;
                    this.RaisePropertyChanged("C_Dt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string J_Name {
            get {
                return this.J_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.J_NameField, value) != true)) {
                    this.J_NameField = value;
                    this.RaisePropertyChanged("J_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string J_imgUrl {
            get {
                return this.J_imgUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.J_imgUrlField, value) != true)) {
                    this.J_imgUrlField = value;
                    this.RaisePropertyChanged("J_imgUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int P_Id {
            get {
                return this.P_IdField;
            }
            set {
                if ((this.P_IdField.Equals(value) != true)) {
                    this.P_IdField = value;
                    this.RaisePropertyChanged("P_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tag {
            get {
                return this.TagField;
            }
            set {
                if ((this.TagField.Equals(value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IkakaoLogin")]
    public interface IkakaoLogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Open", ReplyAction="http://tempuri.org/IkakaoLogin/OpenResponse")]
        bool Open();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Open", ReplyAction="http://tempuri.org/IkakaoLogin/OpenResponse")]
        System.Threading.Tasks.Task<bool> OpenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Close", ReplyAction="http://tempuri.org/IkakaoLogin/CloseResponse")]
        bool Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Close", ReplyAction="http://tempuri.org/IkakaoLogin/CloseResponse")]
        System.Threading.Tasks.Task<bool> CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Select", ReplyAction="http://tempuri.org/IkakaoLogin/User_SelectResponse")]
        bool User_Select(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Select", ReplyAction="http://tempuri.org/IkakaoLogin/User_SelectResponse")]
        System.Threading.Tasks.Task<bool> User_SelectAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Update", ReplyAction="http://tempuri.org/IkakaoLogin/User_UpdateResponse")]
        void User_Update(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Update", ReplyAction="http://tempuri.org/IkakaoLogin/User_UpdateResponse")]
        System.Threading.Tasks.Task User_UpdateAsync(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Insert", ReplyAction="http://tempuri.org/IkakaoLogin/User_InsertResponse")]
        void User_Insert(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Insert", ReplyAction="http://tempuri.org/IkakaoLogin/User_InsertResponse")]
        System.Threading.Tasks.Task User_InsertAsync(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/ProcessUserLogin", ReplyAction="http://tempuri.org/IkakaoLogin/ProcessUserLoginResponse")]
        void ProcessUserLogin(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/ProcessUserLogin", ReplyAction="http://tempuri.org/IkakaoLogin/ProcessUserLoginResponse")]
        System.Threading.Tasks.Task ProcessUserLoginAsync(string userId, string userNickName, string userImg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IkakaoLoginChannel : Beet_Market.ServiceReference1.IkakaoLogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IkakaoLoginClient : System.ServiceModel.ClientBase<Beet_Market.ServiceReference1.IkakaoLogin>, Beet_Market.ServiceReference1.IkakaoLogin {
        
        public IkakaoLoginClient() {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkakaoLoginClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        bool IkakaoLogin.Open() {
            return base.Channel.Open();
        }
        
        System.Threading.Tasks.Task<bool> IkakaoLogin.OpenAsync() {
            return base.Channel.OpenAsync();
        }
        
        bool IkakaoLogin.Close() {
            return base.Channel.Close();
        }
        
        System.Threading.Tasks.Task<bool> IkakaoLogin.CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        bool IkakaoLogin.User_Select(string userId) {
            return base.Channel.User_Select(userId);
        }
        
        System.Threading.Tasks.Task<bool> IkakaoLogin.User_SelectAsync(string userId) {
            return base.Channel.User_SelectAsync(userId);
        }
        
        void IkakaoLogin.User_Update(string userId, string userNickName, string userImg) {
            base.Channel.User_Update(userId, userNickName, userImg);
        }
        
        System.Threading.Tasks.Task IkakaoLogin.User_UpdateAsync(string userId, string userNickName, string userImg) {
            return base.Channel.User_UpdateAsync(userId, userNickName, userImg);
        }
        
        void IkakaoLogin.User_Insert(string userId, string userNickName, string userImg) {
            base.Channel.User_Insert(userId, userNickName, userImg);
        }
        
        System.Threading.Tasks.Task IkakaoLogin.User_InsertAsync(string userId, string userNickName, string userImg) {
            return base.Channel.User_InsertAsync(userId, userNickName, userImg);
        }
        
        void IkakaoLogin.ProcessUserLogin(string userId, string userNickName, string userImg) {
            base.Channel.ProcessUserLogin(userId, userNickName, userImg);
        }
        
        System.Threading.Tasks.Task IkakaoLogin.ProcessUserLoginAsync(string userId, string userNickName, string userImg) {
            return base.Channel.ProcessUserLoginAsync(userId, userNickName, userImg);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChatroom")]
    public interface IChatroom {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/InsertChatRoom", ReplyAction="http://tempuri.org/IChatroom/InsertChatRoomResponse")]
        int InsertChatRoom(int p_id, string a_name, string j_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/InsertChatRoom", ReplyAction="http://tempuri.org/IChatroom/InsertChatRoomResponse")]
        System.Threading.Tasks.Task<int> InsertChatRoomAsync(int p_id, string a_name, string j_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/GetChatRoomList", ReplyAction="http://tempuri.org/IChatroom/GetChatRoomListResponse")]
        Beet_Market.ServiceReference1.ChatRoom[] GetChatRoomList(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/GetChatRoomList", ReplyAction="http://tempuri.org/IChatroom/GetChatRoomListResponse")]
        System.Threading.Tasks.Task<Beet_Market.ServiceReference1.ChatRoom[]> GetChatRoomListAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/On", ReplyAction="http://tempuri.org/IChatroom/OnResponse")]
        bool On();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/On", ReplyAction="http://tempuri.org/IChatroom/OnResponse")]
        System.Threading.Tasks.Task<bool> OnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/Off", ReplyAction="http://tempuri.org/IChatroom/OffResponse")]
        bool Off();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatroom/Off", ReplyAction="http://tempuri.org/IChatroom/OffResponse")]
        System.Threading.Tasks.Task<bool> OffAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatroomChannel : Beet_Market.ServiceReference1.IChatroom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatroomClient : System.ServiceModel.ClientBase<Beet_Market.ServiceReference1.IChatroom>, Beet_Market.ServiceReference1.IChatroom {
        
        public ChatroomClient() {
        }
        
        public ChatroomClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatroomClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatroomClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatroomClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertChatRoom(int p_id, string a_name, string j_name) {
            return base.Channel.InsertChatRoom(p_id, a_name, j_name);
        }
        
        public System.Threading.Tasks.Task<int> InsertChatRoomAsync(int p_id, string a_name, string j_name) {
            return base.Channel.InsertChatRoomAsync(p_id, a_name, j_name);
        }
        
        public Beet_Market.ServiceReference1.ChatRoom[] GetChatRoomList(string id) {
            return base.Channel.GetChatRoomList(id);
        }
        
        public System.Threading.Tasks.Task<Beet_Market.ServiceReference1.ChatRoom[]> GetChatRoomListAsync(string id) {
            return base.Channel.GetChatRoomListAsync(id);
        }
        
        public bool On() {
            return base.Channel.On();
        }
        
        public System.Threading.Tasks.Task<bool> OnAsync() {
            return base.Channel.OnAsync();
        }
        
        public bool Off() {
            return base.Channel.Off();
        }
        
        public System.Threading.Tasks.Task<bool> OffAsync() {
            return base.Channel.OffAsync();
        }
    }
}
