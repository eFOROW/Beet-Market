//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beet_Market.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IkakaoLogin")]
    public interface IkakaoLogin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Open", ReplyAction="http://tempuri.org/IkakaoLogin/OpenResponse")]
        bool Open();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Open", ReplyAction="http://tempuri.org/IkakaoLogin/OpenResponse")]
        System.Threading.Tasks.Task<bool> OpenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Close", ReplyAction="http://tempuri.org/IkakaoLogin/CloseResponse")]
        bool Close();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/Close", ReplyAction="http://tempuri.org/IkakaoLogin/CloseResponse")]
        System.Threading.Tasks.Task<bool> CloseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Select", ReplyAction="http://tempuri.org/IkakaoLogin/User_SelectResponse")]
        bool User_Select(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Select", ReplyAction="http://tempuri.org/IkakaoLogin/User_SelectResponse")]
        System.Threading.Tasks.Task<bool> User_SelectAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Update", ReplyAction="http://tempuri.org/IkakaoLogin/User_UpdateResponse")]
        void User_Update(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Update", ReplyAction="http://tempuri.org/IkakaoLogin/User_UpdateResponse")]
        System.Threading.Tasks.Task User_UpdateAsync(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Insert", ReplyAction="http://tempuri.org/IkakaoLogin/User_InsertResponse")]
        void User_Insert(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/User_Insert", ReplyAction="http://tempuri.org/IkakaoLogin/User_InsertResponse")]
        System.Threading.Tasks.Task User_InsertAsync(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/ProcessUserLogin", ReplyAction="http://tempuri.org/IkakaoLogin/ProcessUserLoginResponse")]
        void ProcessUserLogin(string userId, string userNickName, string userImg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkakaoLogin/ProcessUserLogin", ReplyAction="http://tempuri.org/IkakaoLogin/ProcessUserLoginResponse")]
        System.Threading.Tasks.Task ProcessUserLoginAsync(string userId, string userNickName, string userImg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IkakaoLoginChannel : Beet_Market.ServiceReference1.IkakaoLogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IkakaoLoginClient : System.ServiceModel.ClientBase<Beet_Market.ServiceReference1.IkakaoLogin>, Beet_Market.ServiceReference1.IkakaoLogin {
        
        public IkakaoLoginClient() {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkakaoLoginClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IkakaoLoginClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        bool IkakaoLogin.Open() {
            return base.Channel.Open();
        }
        
        public System.Threading.Tasks.Task<bool> OpenAsync() {
            return base.Channel.OpenAsync();
        }
        
        bool IkakaoLogin.Close() {
            return base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task<bool> CloseAsync() {
            return base.Channel.CloseAsync();
        }
        
        public bool User_Select(string userId) {
            return base.Channel.User_Select(userId);
        }
        
        public System.Threading.Tasks.Task<bool> User_SelectAsync(string userId) {
            return base.Channel.User_SelectAsync(userId);
        }
        
        public void User_Update(string userId, string userNickName, string userImg) {
            base.Channel.User_Update(userId, userNickName, userImg);
        }
        
        public System.Threading.Tasks.Task User_UpdateAsync(string userId, string userNickName, string userImg) {
            return base.Channel.User_UpdateAsync(userId, userNickName, userImg);
        }
        
        public void User_Insert(string userId, string userNickName, string userImg) {
            base.Channel.User_Insert(userId, userNickName, userImg);
        }
        
        public System.Threading.Tasks.Task User_InsertAsync(string userId, string userNickName, string userImg) {
            return base.Channel.User_InsertAsync(userId, userNickName, userImg);
        }
        
        public void ProcessUserLogin(string userId, string userNickName, string userImg) {
            base.Channel.ProcessUserLogin(userId, userNickName, userImg);
        }
        
        public System.Threading.Tasks.Task ProcessUserLoginAsync(string userId, string userNickName, string userImg) {
            return base.Channel.ProcessUserLoginAsync(userId, userNickName, userImg);
        }
    }
}
